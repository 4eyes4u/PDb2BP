---
permalink: /poglavlja/9/
layout: page
title: 9. Napredne tehnike razvijanja Java/SQL aplikacija
---

U ovom poglavlju ćemo demonstrirati rad sa transakcijama, rad u konkurentnom okruženju,
kao i povezivanje na više baza podataka u JDBC aplikacijama.

## 9.1 Transakcioni rad

JDBC supports the following concepts:

- Setting the Auto-Commit Mode
- Transaction isolation level
- Savepoints

### 9.1.1 Auto-Commit Mode

When you connect to a database, the auto-commit property for the Connection object
is set to true by default. If a connection is in the auto-commit mode, a SQL statement
is committed automatically after its successful execution. If a connection is not in the
auto-commit mode, you must call the commit() or rollback() method of the Connection
object to commit or roll back a transaction. Typically, you disable the auto-commit mode
for a connection in a JDBC application, so the logic in your application controls the
final outcome of the transaction. To disable the auto-commit mode, you need to call the
setAutoCommit(false) on the Connection object after a connection has been established.
If a connection URL allows you to set the auto-commit mode, you can also specify it as
part of the connection URL. You set the auto-commit mode of your connection in the
JDBCUtil.getConnection() method to false after you get a Connection object.

```java
// Get a connection
Connection con = DriverManager.getConnection(dbURL, userId, password);

// Set the auto-commit off
con.setAutoCommit(false);
```

If you have enabled the auto-commit mode for your connection, you cannot use its commit()
and rollback() methods. Calling the commit() and rollback() methods on a Connection
object, which has enabled the auto-commit mode, throws a SQLException.

If the setAutoCommit() method is called to change the auto-commit mode of a connection
in the middle of a transaction, the transaction is committed at that time. Typically, you
would set the auto-commit mode of a connection just after connecting to the database.

#### Committing and Rolling Back Transactions

If the auto-commit mode is disabled for a connection, you can use the commit() or rollback()
method to commit or roll back a transaction. Typical code in a JDBC application
that performs a database transaction is as shown:

```java
// Get a connection
Connection con = DriverManager.getConnection(dbURL, userId, password);
// Set the auto-commit off
con.setAutoCommit(false);

try {
    // Perform database transaction activities here
    
    // Successful scenario:
    con.commit();
    // Close the connection
    conn.close();
}
catch (SQLException e) {
    System.out.println("An error occured: " + e.getMessage());
    System.out.println("Rolling back the transaction");

    try {
        // Unsuccessful scenario:
        con.rollback();
        // Close the connection
        conn.close();
    }
    catch (SQLException e) {
    }

    System.exit(1);
}
```

{% include zadatak.html broj="9.1" tekst="Napisati Java program u kojem se SQL naredbe izvr\v savaju dinami\v cki koji redom:\n
\n
1. Pronalazi i ispisuje najveći indeks iz tabele `ISPIT`.\n
2. Briše studenta sa pronađenim indeksom iz tabele `ISPIT` i ispisuje poruku korisniku o uspešnosti brisanja.\n
3. Ponovo pronalazi i ispisuje najveći indeks iz tabele `ISPIT`.\n
4. Pita korisnika da li želi da potvrdi ili poništi izmene. U zavisnosti od korisnikovog odgovora, aplikacija potvrđuje ili poništava izmene uz ispisivanje poruke korisniku.\n
5. Ponovo pronalazi i ispisuje najveći indeks iz tabele `ISPIT`.\n" %}

Re\v senje:

include_source(primeri/poglavlje_9/src/zadatak_9_1/Main.java)

### 9.1.2 Transaction Isolation Level

The ANSI SQL-92 standard defines four transaction isolation levels in terms of the data
consistency. Each isolation level defines what kinds of data inconsistencies are allowed, or
not allowed. The four transaction isolation levels are as follows:

- Read uncommitted
- Read committed
- Repeatable read
- Serializable

Java defines the following four constants in the Connection interface that correspond to
the four isolation levels defined by the ANSI SQL-92 standard:

- TRANSACTION_READ_UNCOMMITTED
- TRANSACTION_READ_COMMITTED
- TRANSACTION_REPEATABLE_READ
- TRANSACTION_SERIALIZABLE

You can set the isolation level of a transaction for a database connection using the set-
TransactionIsolation(int level) method of the Connection interface.

```java
// Get a Connection object
Connection con = DriverManager.getConnection(dbURL, userId, password);

// Set the transaction isolation level to read committed
con.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
```

TODO: dodati zadatke za ovaj deo gradiva

### 9.1.3 Savepoints in a Transaction

A database transaction consists of one or more changes as a unit of work. A savepoint in
a transaction is like a marker that marks a point in a transaction so that, if needed, the
transaction can be rolled back (or undone) up to that point.

An object of the Savepoint interface represents a savepoint in a transaction. To mark a
savepoint in a transaction, you simply call the setSavepoint() method of the Connection.
The setSavepoint() method is overloaded. One version accepts no argument and another
accepts a string, which is the name of the savepoint. The setSavepoint() method returns
a Savepoint object, which is your marker and you must keep it for future use. Here’s an
example:

```java
Connection con = DriverManager.getConnection(dbURL, userId, password);
con.setAutoCommit(false);

Statement stmt = con.createStatement();

stmt.execute("insert into person values ('John', 'Doe')");
Savepoint sp1 = con.setSavepoint(); // 1

stmt.execute("insert into person values ('Jane', 'Doe')");
Savepoint sp2 = con.setSavepoint(); // 2

stmt.execute("insert into person values ('Another', 'Unknown')");
Savepoint sp3 = con.setSavepoint(); // 3
```

At this point, you have finer control on the transaction if you want to undo any of these
three inserts into the person table. Now you can use another version of the rollback()
method of the Connection, which accepts a Savepoint object. If you want to undo all
changes that were made after savepoint 1, you can do so as follows:

```java
// Rolls back inserts 2 and 3
con.rollback(sp1);
```

Once you roll back up to a savepoint (say, spx), all savepoints that were created after the
savepoint spx are released and you cannot refer to them again. If you refer to a released
savepoint, the JDBC driver will throw a SQLException. The following snippet of code
will throw a SQLException:

```java
con.rollback(sp2); // Will release sp3
con.rollback(sp3); // Will throw an exception: sp3 is already released.
```

Note that when you roll back a transaction to a savepoint, that savepoint itself is not
released. When you call, for example, con.rollback(sp2), savepoint sp2 remains valid. You
can add more savepoints afterward and roll back up to savepoint sp2 again.

TODO: dodati zadatke za ovaj deo gradiva

